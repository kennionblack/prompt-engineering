import os
import json
import asyncio
import pyjson5
from dotenv import load_dotenv
import gradio as gr
from openai import OpenAI
import deepl
import pinyin_jyutping

load_dotenv()

oai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
deepl_client = deepl.Translator(auth_key=os.getenv("DEEPL_API_KEY"))
pinyin_converter = pinyin_jyutping.PinyinJyutping()

pinyin_prompt = """
Translate the text at the end of this prompt into both Mandarin pinyin and simplified Mandarin characters with this EXACT JSON schema. 

Provide contextual and cultural information about any ambiguity with the translation in the indicated field. 

JSON schema:
<schema>
{
  "original_text": string,
  "pinyin_translation": string,
  "simplified_mandarin_translation": string,
  "ambiguity": string
}
</schema>

An example of a successful translation provided the string "It looks like your audit homework is going well" should be as follows:
<example>
{
  "original_text": "It looks like your audit homework is going well",
  "pinyin_translation": "Kàn qǐ lái nǐ de shěn jì zuò yè jìn zhǎn bú cuò",
  "simplified_mandarin_translation": "看起来你的审计作业进展不错",
  "ambiguity": "The word "audit" is translated as 审计 (shěnjì), which is the standard term for financial or formal auditing. If the context refers to studying auditing as a course or a broader “audit” concept, other terms might be more natural (e.g., 审核, 审查, 稽核, or 参加课程的作业). - "作业" commonly means homework or assignments in a class; in some contexts it could be better expressed as 作业任务 (assignment task) or 任务 depending on formal vs. informal tone. "进展不错" is neutral and natural, but depending on nuance you could also say 进展顺利 (progress is smooth) or 表现良好 (performing well)."
}
</example>

XML is used only to provide structure for this prompt. DO NOT include any XML tags or text beyond the required information in the JSON schema in your response.

TEXT TO TRANSLATE: 
"""


async def get_openai_translation(text):
    full_prompt = pinyin_prompt + text

    response = await asyncio.to_thread(
        oai_client.responses.create, model="gpt-5-nano", input=full_prompt
    )

    # Sometimes GPT-5 returns a reasoning message first, sometimes it doesn't
    message_index = 1 if response.output[0].type == "reasoning" else 0
    openai_result = response.output[message_index].content[0].text

    try:
        # GPT-5 is occasionally returning JavaScript-style object literals with unquoted keys
        # so we use pyjson5 to parse it instead of the regular JSON package
        # I could make the prompt more explicit to avoid this, but pyjson5 is less work
        return pyjson5.loads(openai_result)
    except Exception as e:
        print(f"Error parsing OpenAI response: {e}")
        print("Response content:", openai_result)
        return {
            "original_text": text,
            "pinyin_translation": "Error parsing OpenAI response",
            "simplified_mandarin_translation": "Error parsing OpenAI response",
            "ambiguity": "Error parsing OpenAI response",
        }


async def get_deepl_translation(text):
    deepl_result = await asyncio.to_thread(deepl_client.translate_text, text, target_lang="ZH")
    simplified_mandarin = deepl_result.text

    try:
        pinyin_translation = await asyncio.to_thread(pinyin_converter.pinyin, simplified_mandarin)
    except Exception as e:
        pinyin_translation = f"Error generating pinyin: {str(e)}"

    return {
        "original_text": text,
        "pinyin_translation": pinyin_translation,
        "simplified_mandarin_translation": simplified_mandarin,
        "ambiguity": "Generated by DeepL + pinyin_jyutping",
    }


async def to_chinese_json(text):
    openai_task = get_openai_translation(text)
    deepl_task = get_deepl_translation(text)

    openai_data, deepl_data = await asyncio.gather(openai_task, deepl_task)

    comparison_result = await compare_translations(openai_data, deepl_data)

    result = {
        "openai_translation": openai_data,
        "deepl_translation": deepl_data,
        "comparison": comparison_result,
    }

    return json.dumps(result, ensure_ascii=False, indent=2)


async def compare_translations(openai_data, deepl_data):
    comparison_prompt = f"""
    Compare these two Mandarin translations of the same English text and grade each on an A-F scale with reasoning.
    
    ORIGINAL TEXT: {openai_data['original_text']}
    
    TRANSLATION 1 (OpenAI):
    Pinyin: {openai_data['pinyin_translation']}
    Simplified Mandarin: {openai_data['simplified_mandarin_translation']}
    Translation Notes: {openai_data['ambiguity']}
    
    TRANSLATION 2 (DeepL + pinyin_jyutping):
    Pinyin: {deepl_data['pinyin_translation']}
    Simplified Mandarin: {deepl_data['simplified_mandarin_translation']}
    
    For each translation, analyze:
    1. Accuracy: How well it preserves the meaning of the original text
    2. Naturalness: How natural and idiomatic the translation sounds
    3. Handling of ambiguities: How well it resolves ambiguous terms
    4. Pinyin quality: Accuracy of the tone marks and spacing
    
    Compare specific translation choices between the two versions. Point out meaningful differences in how each system translated key phrases.
    
    Provide a detailed comparison with specific examples from both translations.
    Grade each translation on an A-F scale with justification.
    Format your response as JSON with the following structure:
    {{
      "openai_grade": string (A-F),
      "openai_reasoning": string,
      "deepl_grade": string (A-F),
      "deepl_reasoning": string,
      "pinyin_comparison": string,
      "overall_comparison": string,
      "preferred_translation": string ("OpenAI", "DeepL", or "Tie")
    }}
    """

    response = await asyncio.to_thread(
        oai_client.responses.create, model="gpt-5-nano", input=comparison_prompt
    )
    # Same reasoning message pattern as before
    message_index = 1 if response.output[0].type == "reasoning" else 0
    comparison_text = response.output[message_index].content[0].text

    try:
        return pyjson5.loads(comparison_text)
    except Exception as e:
        print(f"Error parsing comparison response: {e}")
        print("Comparison content:", comparison_text)
        return {"raw_comparison": comparison_text}


async def process_and_display(text):
    raw_result = await to_chinese_json(text)
    result = json.loads(raw_result)

    openai_trans = result["openai_translation"]
    deepl_trans = result["deepl_translation"]
    comp = result["comparison"]

    # Handle the case where comparison is just raw text (usually when the first OpenAI call doesn't return valid JSON)
    if "raw_comparison" in comp:
        comparison_text = comp["raw_comparison"]
        pinyin_comparison_text = "N/A"
        openai_grade_text = "N/A"
        deepl_grade_text = "N/A"
        preferred_text = "N/A"
    else:
        openai_grade_text = (
            f"Grade: {comp.get('openai_grade', 'N/A')}\n{comp.get('openai_reasoning', '')}"
        )
        deepl_grade_text = (
            f"Grade: {comp.get('deepl_grade', 'N/A')}\n{comp.get('deepl_reasoning', '')}"
        )
        comparison_text = comp.get("overall_comparison", "")
        pinyin_comparison_text = comp.get("pinyin_comparison", "")
        preferred_text = comp.get("preferred_translation", "")

    return (
        raw_result,
        openai_trans["simplified_mandarin_translation"],
        openai_trans["pinyin_translation"],
        openai_trans["ambiguity"],
        openai_grade_text,
        deepl_trans["simplified_mandarin_translation"],
        deepl_trans["pinyin_translation"],
        deepl_grade_text,
        comparison_text,
        pinyin_comparison_text,
        preferred_text,
    )


def process_text(text):
    return asyncio.run(process_and_display(text))


with gr.Blocks() as demo:
    with gr.Row():
        text = gr.Textbox(label="Enter your text", lines=3)

    with gr.Row():
        button = gr.Button("Submit")

    with gr.Row():
        with gr.Accordion("Raw Output", open=False):
            raw_output = gr.JSON(label="Raw JSON Response")

    with gr.Row():
        with gr.Column():
            gr.Markdown("### OpenAI Translation")
            openai_mandarin = gr.Textbox(label="Simplified Mandarin")
            openai_pinyin = gr.Textbox(label="Pinyin")
            openai_ambiguity = gr.Textbox(label="Translation Notes", lines=3)
            openai_grade = gr.Textbox(label="Grade and Reasoning", lines=3)

        with gr.Column():
            gr.Markdown("### DeepL Translation")
            deepl_mandarin = gr.Textbox(label="Simplified Mandarin")
            deepl_pinyin = gr.Textbox(label="Pinyin")
            deepl_grade = gr.Textbox(label="Grade and Reasoning", lines=3)

    with gr.Row():
        comparison = gr.Textbox(label="Overall Comparison", lines=3)
        pinyin_comparison = gr.Textbox(label="Pinyin Comparison", lines=3)
        preferred = gr.Textbox(label="Preferred Translation")

    output_components = [
        raw_output,
        openai_mandarin,
        openai_pinyin,
        openai_ambiguity,
        openai_grade,
        deepl_mandarin,
        deepl_pinyin,
        deepl_grade,
        comparison,
        pinyin_comparison,
        preferred,
    ]

    button.click(
        process_text,
        inputs=text,
        outputs=output_components,
    )

    text.submit(
        process_text,
        inputs=text,
        outputs=output_components,
    )


demo.launch()
